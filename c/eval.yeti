/*
 * Yeti compiler and eval (derived from old REPL module) interface.
 *
 * Copyright (c) 2008-2013 Madis Janson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Yeti compiler invocation and code evaluation.
 *
 * This module is also used by the yeti.lang.compiler.yeti program
 * to provide a REPL and compile Yeti code.
 */
module yeti.lang.compiler.eval;

import java.lang: Class, ClassLoader, Thread, Throwable;
import yeti.lang.Core;
import java.security.Permission;
import java.io.File;

load yeti.lang.compiler.showtype;

typedef typedef_description = {
    /// The name of the new type alias defined by the typedef.
    name is string,
    /// Type assigned to the type alias.
    type is type,
    /// Type parameter names.
    param is list<string>
}

typedef module_description = {
    /// Description of the module from the top doc-string.
    doc is string,
    /// Module name (like `yeti.lang.compiler.eval`).
    name is string,
    /// Module type signature.
    type is type,
    /// List of typedefs exported by the module.
    typedefs is list<typedef_description>,
    /// Compilation was skipped, type don't have doc-strings.
    skipped is boolean
}

// XXX: Beware - the GlobalSandbox argument sets a very restricive
//      security manager globally and you CANNOT remove it later.
execClass argv sandbox eval loader mainClass
        is array<string> -> boolean -> boolean
           -> ~ClassLoader -> string -> ~Object =
   (c = Class#forName(strReplace '/' '.' mainClass, true, loader);
    old_argv = Core#ARGV#get();
    th = Thread#currentThread();
    old_cl = th#getContextClassLoader();
    th#setContextClassLoader(loader);
    try
        if eval then
            Core#ARGV#set(argv);
            f = c#newInstance() unsafely_as () -> 'a;
            if sandbox then
                class Sandbox(boolean[] act) extends java.lang.SecurityManager
                    void checkPermission(Permission perm)
                        this#checkPermission(perm, ()),
                    void checkPermission(Permission perm, Object context)
                        if act[0] then
                            throw new java.lang.SecurityException()
                        fi,
                    void checkExit(int status)
                        ()
                end;
                sandboxed = new boolean[1];
                System#setSecurityManager(new Sandbox(sandboxed));
                // can't activate before, because
                // setSecurityManager would fail otherwise
                sandboxed[0] := true
            fi;
            f ()
        else
            aa = new Object[1];
            aa[0] := argv is array<string> as ~String[] as ~Object;
            c#getMethod("main", [classOf String[]])#invoke((), aa)
        fi
    finally
        Core#ARGV#set(old_argv);
        if not sandbox then
            th#setContextClassLoader(old_cl)
        fi
    yrt);

createCtx genericOpt cl =
   (var warn = \() is ~CompileException -> ();
    var classPath = [] is list<string>;
    var flags = 0;
    ctx = new Compiler();
    java = array [];

    for genericOpt
       \case of

        /// Set destination directory, where to write class files.
        /// Disables execution on evaluateYetiCode as side effect.
        To dir:
            dir = if dir != '' then "\(dir)/" else '' fi;
            if nullptr? ctx#writer and dir != '' then
                push java '-d';
                push java dir;
            fi;
            ctx#writer := new FileWriter(dir) as ~yeti.lang.Fun;
            ctx#depDestDir := dir;

        /// Set custom source reader function.
        SourceReader f:
            ctx#customReader := 
                f is {
                    /// Source file name (may include directories).
                    /// The reader function should assign a canonical path
                    /// of the source file to it.
                    var .name is string,
                    /// Parent directory from source path entry.
                    /// Can be undef_str, when not searched
                    /// from the source path.
                    .parent is string
                } -> string as ~yeti.lang.Fun;

        /// Set custom class writing function.
        ClassWriter writer:
            ctx#writer := writer is string -> ~byte[] -> () as ~yeti.lang.Fun;

        /// Set warning handler (~CompileException -> ()).
        /// Called once for each warning.
        /// Hint: use Warn (push somewhere).
        Warn action: warn := action;

        /// Give class path to search for compiled libraries.
        ClassPath path: classPath := classPath ++ path;

        /// If you have really broken JVM, generate superfluous casts.
        ICast (): ctx#isGCJ := true;

        /// Set modules that are preloaded. Default is yeti.lang.std and io.
        Preload p: ctx#preload := p is list?<string> as ~String[];

        /// Print parse tree to stdout.
        /// Not very useful, unless you want to debug the compiler.
        ParseTree (): flags := flags b_or Compiler#CF_PRINT_PARSE_TREE;

        /// Disable importing foreign classes. Useful when sandboxing.
        NoImport ():
            ctx#globalFlags := ctx#globalFlags b_or Compiler#GF_NO_IMPORT;

        /// Disable generation of Java 1.6 frames to class files.
        ///
        /// Mainly useful for debugging, this option is not needed
        /// to run on older JVMs.
        NoFrames (): ctx#classWriterFlags := 0
        esac;
    ctx#classPath := new ClassFinder(classPath, ctx#depDestDir);
    if nullptr? ctx#writer then
        var cl = cl;
        if nullptr? cl then
            cl := Thread#currentThread()#getContextClassLoader();
            if not empty? classPath then
                urls = array [];
                for classPath do p:
                    push urls new File(p)#toURI()#toURL()
                done;
                cl := new java.net.URLClassLoader(urls, cl) as ~ClassLoader
            fi
        fi;
        ctx#writer := new Loader(cl) as ~yeti.lang.Fun;
    fi;
    {warn, ctx, flags, java});

nullTypeAction = const ();

moduleDoc m is ~ModuleType -> module_description = {
    doc = m#topDoc,
    name = strReplace '/' '.' m#name,
    type = m#yetiType() unsafely_as type,

    typedefs =
        typedefs = array [];
        addDef name def scope =
           (param = array [];
            type = TypeDescr#typeDef(def is ~YType[],
                                     param unsafely_as ~yeti.lang.MList,
                                     scope is ~TypePattern);
            push typedefs {
                name = string name,
                type = type unsafely_as type,
                param = list param
            });
        var scope = m#typeScope;
        if nullptr? scope then
            i = m#typeDefs#entrySet()#iterator();
            i#hasNext() loop
               (e = i#next() unsafely_as ~java.util.Map$Entry;
                addDef e#getKey() (e#getValue() unsafely_as ~YType[])
                       (() as ~TypePattern));
            sortBy (on (<) (.name)) typedefs
        else
            defined = new java.util.HashMap(m#typeDefs);
            count = m#typeDefs#size();
            not nullptr? scope and length typedefs < count loop
               (typeDef = scope#typedef(false);
                if not nullptr? typeDef 
                        and not nullptr? defined#remove(scope#name) then
                    addDef scope#name typeDef TypePattern#toPattern(scope#outer,
                                                                    true)
                fi;
                scope := scope#outer);
            reverse typedefs
        fi,

    skipped = m#fromClass,
};

/**
 * Compiles a set of Yeti (and possibly Java) source files into
 * JVM class files. Module dependencies will be automatically compiled,
 * if possible.
 *
 * Arguments:
 * genericOptions - generic compile options
 * options        - additional options
 * source         - list of the source files to compile
 *
 * Description:
 * Compiles the source files into class files. Yeti sources (identified
 * by the `.yeti` suffix) will be compiled directly. The Java sources
 * (with `.java` suffix) will be compiled by invoking the javac compiler
 * class com.sun.tools.javac.Main (`lib/tools.jar` is loaded from the
 * JDK home, if the class is not already available).
 *
 * On mixed compiles a three-way sequence is done, by partially parsing
 * the Java source files first to obtain the class types, compiling
 * Yeti sources and finally compiling Java sources using javac.
 *
 * The source and class files don't have to be necessarily on
 * the filesystem, if `SourceReader` or `ClassWriter` options are used
 * and only Yeti code is compiled (the javac compiler used for
 * the Java code works only with filesystem).
 *
 * Examples:
 * : load yeti.lang.compiler.eval;
 * :
 * : compileYetiFiles [To 'target'] [] ['hello.yeti'];
 * A `hello.class` will be generated to the target directory,
 * given that you have the following `hello.yeti` file:
 * : println 'Hello world!';
 *
 * The compiled code can be executed with the usual `java` command:
 * : java -cp yeti.jar:target hello
 * 
 * The `yeti.jar` (or `yeti-lib.jar`) is required here for
 * the Yeti standard library.
 */
compileYetiFiles genericOpt options files =
   (var exec = false;
    var execArg = array [];
    var typeAction = nullTypeAction;
    var mainClass = '';

    param = createCtx genericOpt (() as ~ClassLoader);
    {ctx} = param;

    sourcePath = array [];
    for options
       \case of

        /// Get module types. The action (`module_description -> ()`)
        /// is called after each module file given for compilation. 
        Type action:
            typeAction := action;
            ctx#globalFlags := ctx#globalFlags b_or Compiler#GF_DOC;

        /// Execute main after compilation of the sources.
        /// The _argv will be set to the arg parameter.
        Exec arg:
            if not ctx#writer instanceof Loader then
                throw new CompileException(0, 0,
                    "To and Exec options together are not supported")
            fi;
            exec := true;
            execArg := arg;

        /// Add source directory to source path (where compiler searches
        /// for uncompiled dependencies).
        SourceDir dir:
            push sourcePath dir;

        /// Option to give to the javac,
        /// when .java files were in source file set.
        JavaOption option:
            push param.java option;
        esac;

    // TODO use null writer when no Exec and no To,
    // for signaling to skip the bytecode generation.
    ctx#setSourcePath(sourcePath);
    if not same? typeAction nullTypeAction and not exec
            and ctx#writer instanceof Loader then
        ctx#writer := () as ~yeti.lang.Fun;
        Compiler#currentCompiler#set(ctx);
        for (list files) do src:
            typeAction (moduleDoc YetiTypeVisitor#getType(ctx, (), src, true))
        done
    else
        try
            var flags = param.flags;
            if exec and length files == 1 then
                flags := flags b_or Compiler#CF_EXPECT_PROGRAM
            fi;
            mainClass := ctx#compileAll(sort files, flags, param.java)
        finally
            ctx#enumWarns(param.warn)
        yrt;
        if not same? typeAction nullTypeAction then
            i = ctx#types#values()#iterator();
            i#hasNext() loop
               (t = i#next() unsafely_as ~ModuleType;
                if t#hasSource then
                    typeAction (moduleDoc t)
                fi)
        fi
    fi;
    if exec then
        if mainClass != '' then
            classLoader = (ctx#writer unsafely_as ~Loader)#mem;
            // The Java reflection API used by execClass to invoke main() will
            // wrap exceptions from user code into InvocationTargetException,
            // so we don't need to do anything here with those exceptions.
            _ = execClass execArg false false classLoader mainClass;
        elif not defined? mainClass then
            throw new CompileException(0, 0, "Cannot run a module")
        fi
    fi);

/**
 * Evaluates Yeti expression.
 *
 * Arguments:
 * genericOptions    - generic compile options
 * evaluationOptions - options about evaluating
 * expression        - string containing the Yeti code
 *
 * Description:
 * Compiles the expression in memory to JVM class(es),
 * and then lets the JVM to load and execute the bytecode
 * from these generated classes.
 *
 * Examples:
 * Run a chunk of code, ignoring the result value:
 * : load yeti.lang.compiler.eval;
 * :
 * : _ = evaluateYetiCode [] [] 'println "Hello world"';
 *
 * Evaluate expression with specific binding environment:
 * : // Creates the environment
 * : env = evaluateYetiCode [];
 * :
 * : // bind variable in the environment
 * : case env [Bind ()] 'x = 40' of
 * : {result = Result _}: (); // OK
 * : {str}: failWith str;
 * : esac;
 * :
 * : // use the binding 
 * : res = env [] 'x + 2';
 * : println res;
 *
 * The last println should print the following line:
 * : {bindings=[], result=Result 42, str="42 is number\n", type=Simple "number"}
 */
evaluateYetiCode genericOpt =
   (var evalEnv = () as ~YetiEval;
    mainClass = "code";
    var cl = () as ~ClassLoader;
    do options code:
        bindingVars = array [];
        var type = Simple '()';
        var exec = true;
        var bind = false;
        var sandbox = false;
        var argv = array [];
        var sourceName = undef_str;
        param = createCtx genericOpt cl;
        {ctx} = param;
        var flags = param.flags b_or Compiler#CF_EVAL
                                b_or Compiler#CF_EVAL_RESOLVE;
        if ctx#writer instanceof Loader then
            cl := (ctx#writer unsafely_as ~Loader)#mem#getParent()
        fi;

        for options
           \case of
            /// Store top-level bindings in the evaluation environment.
            ///
            /// Allows the bindings to be accessed by later evaluations with
            /// the same context.
            Bind (): bind := true;

            /// Set _argv to given parameter turing execution.
            Exec a: argv := a;

            /// Don't execute the code actually, only compile.
            /// Useful, if you just want to get the type of expression.
            NoExec (): exec := false;

            /// Create global sandbox before execution.
            /// Unfortunately, you can't disable it later.
            GlobalSandbox (): sandbox := true;

            /// Source "filename"
            Source name: sourceName := name;
            esac;

        typeOf? = code =~ '\Wis$';

        code = if typeOf? then
                   bind := false;
                   exec := false;
                   "throw (() as ~Exception) is\n\(strLeft code
                        (strLength code - 2))"
               else
                   code
               fi;

        if bind then
            flags := flags b_or Compiler#CF_EVAL_STORE;
        fi;

        if nullptr? evalEnv then
            evalEnv := new YetiEval()
        fi;

        bindings = evalEnv#bindings;
        var bindBarrier = bindings#size();

        oldContext = YetiEval#set(evalEnv);

        /// The result of evaluation.
        result =
            try
                compileErr =
                    try
                        t = ctx#compile(sourceName, code, flags);
                        type := if typeOf? then
                                    TypeDescr#yetiType(t#type, (), ())
                                else
                                    t#yetiType()
                                fi unsafely_as type;
                        () as ~CompileException
                    catch CompileException ex:
                        ex
                    finally
                        ctx#enumWarns(param.warn)
                    yrt;
                if not nullptr? compileErr then
                    CompileException compileErr
                elif exec and ctx#writer instanceof Loader then
                    val = Result (execClass argv sandbox true
                                            (ctx#writer unsafely_as ~Loader)#mem
                                            mainClass);
                    bindBarrier < bindings#size() loop
                       (push bindingVars (bindings#get(bindBarrier)
                                            unsafely_as ~YetiEval$Binding);
                        bindBarrier := bindBarrier + 1);
                    val
                else
                    Result (() as ~Object)
                fi
            catch java.lang.VirtualMachineError ex:
                // other virtualmachine errors will be rethrown
                // (including OutOfMemoryError)
                if sandbox or ex instanceof java.lang.StackOverflowError then
                    Exception (ex as ~Throwable)
                else
                    throw ex
                fi
            catch java.lang.ThreadDeath ex:
                throw ex // honor thread death also
            catch Throwable ex:
                Exception ex
            finally
                YetiEval#set(oldContext)
            yrt;

        bindings () =
           (res = array [];
            for (list bindingVars) do binding:
                if not binding#isImport then
                    t = binding#type;
                    push res "\(if binding#mutable then "var " else "" fi)\
                             "\(binding#name) is \(t) = \
                             "\(if t#deref()#type == YetiType#UNIT then
                                    "()"
                                elif nullptr? binding#value then
                                    "<undef>"
                                else
                                    Core#show(binding#val())
                                fi)"
                fi
            done;
            res);

        {
            /// The inferred type of the evaluated expression.
            type = type, result,
            
            /// List of new bindings created in
            /// the environment during evaluation.
            ///
            /// The Yeti syntax "name is type = value" is used.
            get bindings () = list (bindings ()),

            /// The result of evaluation formatted as string, like the Yeti
            /// REPL would print it (actually Yeti REPL uses this getter).
            get str () =
                res = bindings ();
                case result of
                Exception ex:
                    push res (stackTraceString ex);
                CompileException ex:
                    push res (ex is ~CompileException)#getMessage();
                Result val:
                    if typeOf? then
                        push res (showType [] '' type)
                    elif type != Simple "()" then
                        s = try
                                Core#show(val)
                            catch Exception ex:
                                stackTraceString ex
                            yrt;
                        push res "\(s) is \(showType [] '' type)"
                    fi
                esac;
                strJoin '' (map (^ "\n") res),
        }
    done);

/**
 * Generates HTML documentation for the given set of module descriptions.
 *
 * Examples:
 * The module descriptions can be obtained using the `compileYetiFiles`
 * function with `Type` option.
 * : load yeti.lang.compiler.eval;
 * :
 * : modules = array [];
 * : compileYetiFiles [] [Type (push modules)] ['modules/xml.yeti'];
 * : generateYetiDoc {directory = 'doctest', modules, error = failWith};
 *
 * This should generate the documentation HTML into directory named `doctest`
 * (given that the `modules/xml.yeti` module source file can be found).
 */
generateYetiDoc {directory, modules, error} is {
            /// Directory where to write the generated HTML files.
            ///
            /// The directory is created if it doesn't exist already.
            .directory is 'a,
            /// List of module descriptions.
            .modules is 'b,
            /// Error handler (takes error message as argument).
            .error is 'c
        } -> () =
   (cl = classOf YetiEval#getClassLoader();
    ctx = evaluateYetiCode [ICast (),
            ClassWriter (new Loader(cl) unsafely_as string -> ~byte[] -> ())];
    case ctx [Bind (), Source 'doc.yeti', Exec (array [directory])]
             ((inputHandle cl#getResourceAsStream('doc.yeti')
                           'UTF-8').contents ()) of
    {result = Result obj}:
        {moduleDoc, docIndex} = obj is ~Object unsafely_as 'a;
        createPath directory;
        for (modules is list?<module_description>) moduleDoc;
        docIndex ();
    {str}:
        error str is ()
    esac);

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.MatchingTask;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;

class YetiTask extends MatchingTask
    genOpt = array [],
    options = array [],
    modules = array [],
    sources = array [],
    var src = () as ~File,
    var classPath = () as ~Path,
    var docDir = undef_str,

    void setSrcDir(String dir)
        src := new File(dir unsafely_as ~String),

    void setDestDir(String dir)
        push genOpt (To dir),

    void setPreload(String preload)
        push genOpt (Preload (strSplit ':' preload)),

    void setJavaOpt(String option)
        for (strSplit ' +' option) (push options . JavaOption),
        
    void setDocDir(String dir)
        push options (Type (push modules));
        docDir := dir,

    void addSrc(FileSet src)
        push sources src,

    Path createClasspath()
        if nullptr? classPath then
            classPath := new Path(this#getProject())
        fi;
        classPath,

    void setICast(boolean icast)
        if icast then
            push genOpt (ICast ())
        fi,

    void execute()
        if not this#fileset#hasPatterns() then
            this#setIncludes("*.yeti")
        fi;
        scanners = array [];
        if empty? sources or not nullptr? src then
            if nullptr? src then
                src := this#getProject()#getBaseDir()
            fi;
            push scanners this#getDirectoryScanner(src)
        fi;
        for (list sources) do s:
            if not s#hasPatterns() then
                s#setIncludes("*.yeti")
            fi;
            push scanners s#getDirectoryScanner(this#getProject())
        done;
        files = array [];
        for (list scanners) do scanner:
            for (list scanner#getIncludedFiles()) do f:
                push files new File(scanner#getBasedir(), f)#getPath()
            done;
            push options (SourceDir scanner#getBasedir()#getPath())
        done;
        cp = if nullptr? classPath then [] else map string classPath#list() fi;
        push genOpt (ClassPath cp);
        warn ex = this#log((ex is ~CompileException)#getMessage());
        push genOpt (Warn warn);
        options = JavaOption "-encoding" :: JavaOption utf8 :: options;
        this#log("Compiling \(length files) files.");
        try
            compileYetiFiles genOpt options files;
            if not empty? modules then
                generateYetiDoc {directory = docDir, modules, error = failWith}
            fi
        catch CompileException ex:
            throw new BuildException(ex#getMessage())
        catch Failure ex:
            throw new BuildException(ex#getMessage())
        catch Exception ex:
            ex#printStackTrace();
            throw new BuildException(ex)
        yrt
end;

import yeti.lang:Fun;
import java.util:List;

class BaseEvalUtil
    var toDir = undef_str,
    var sourceReader = () as ~yeti.lang.Fun,
    var codeWriter = () as ~CodeWriter,
    var warn = () as ~yeti.lang.Fun,
    var classPath = () as ~List,
    var iCast = false,
    var frames = true,
    var _import = true,
    var parseTree = false,
    var preload = () as ~List,

    void setICast(boolean bo) iCast := bo,
    boolean getICast() iCast,

    void setFrames(boolean bo) frames := bo,
    boolean getFrames() frames,

    void setImport(boolean bo) _import := bo,
    boolean getImport() _import,

    void setParseTree(boolean bo) parseTree := bo,
    boolean getParseTree() parseTree,

    void setPrelaod(List pl) preload := pl,
    List getPreload() preload,

    void setTo(String dir) toDir := dir,
    String getTo() toDir,

    void setSourceReader(Fun reader)
        sourceReader := reader,
    Fun getSourceReader() sourceReader,

    void setCodeWriter(CodeWriter wr) codeWriter := wr,
    CodeWriter getCodeWriter() codeWriter,

    void setWarn(Fun w) warn := w,
    Fun getWarn() warn,

    void setClassPath(List cp) classPath := cp,
    List getClassPath() classPath,



end;
_getGenericOptions eu =
    (opts = array [];
    if (eu is ~BaseEvalUtil)#getICast() then
        push opts (ICast ());
    fi;

    if not eu#getFrames() then
        push opts (NoFrames ());
    fi;

    if not eu#getImport() then
        push opts (NoImport ());
    fi;

    if eu#getParseTree() then
        push opts (ParseTree ());
    fi;

    if not nullptr? eu#getPreload() then
        mapJavaList string eu#getPreload()
        |> Preload
        |> push opts;
    fi;

    if defined? eu#getTo() then
        push opts (To (eu#getTo() as string));
    fi;
    if not nullptr? eu#getSourceReader() then
        push opts (SourceReader
            (eu#getSourceReader() unsafely_as 
                { var .name is string, 
                  .parent is string} 
                  -> string));
    fi;
    if not nullptr? eu#getCodeWriter() then
        push opts (CodeWriter eu#getCodeWriter());
    fi;
    if not nullptr? eu#getClassPath() then
        mapJavaList string eu#getClassPath()
        |> ClassPath
        |> push opts;
    fi;
    if not nullptr? eu#getWarn() then
        push opts (Warn
            (eu#getWarn() unsafely_as ~CompileException -> ()))
    fi;
    list opts);

class CompileUtil extends BaseEvalUtil 
    var typeAction = () as ~Fun,
    var execArgs = () as ~List,
    var sourceDirs = () as ~List,
    var javaOptions = () as ~List,

    void setType(Fun fn) typeAction := fn,
    Fun getType() typeAction,

    void setExec(List args) execArgs := args,
    List getExec() execArgs,

    void setSourceDirs(List dirs) sourceDirs := dirs,
    List getSourceDirs() sourceDirs,

    void setJavaOptions(List opts) javaOptions := opts,
    List getJavaOptions() javaOptions,

    void compile(List files) 
        opts = array [];

        if not nullptr? typeAction then
            push opts 
                (Type (typeAction unsafely_as 
                        module_description -> ()))
        fi;
        if not nullptr? execArgs then
            mapJavaList string execArgs 
            |> push opts . Exec . array
        fi;
        if not nullptr? sourceDirs then
            for (mapJavaList string sourceDirs) 
                (push opts . SourceDir);
        fi;
        if not nullptr? javaOptions then
            for (mapJavaList string javaOptions) 
                (push opts . JavaOption);
        fi;
        
        compileYetiFiles
            (_getGenericOptions this)
            opts
            (mapJavaList string files),
    
    void yetiDoc(String toDir, List files)

        modules = array [];
        this#setType( (push modules) unsafely_as ~Fun);
        this#compile(files);
        
        generateYetiDoc {directory = toDir, modules, error = failWith},

end;

class EvalResult(String[] bindings, Object result, 
                String resultString)
    String[] getBindings() bindings,
    Object getResult() result,
    String getResultString() resultString
end;

    
class EvalUtil extends BaseEvalUtil
    var bind = false,
    var args = () as ~List,
    var exec = true,
    var sandbox = false,
    var source = undef_str,

    var ctxt = none,
    void setBind(boolean bd) bind := bd,
    boolean getBind() bind,

    void setArgs(List ar) args := ar,
    List getArgs() args,

    void setExec(boolean bo) exec := bo,
    boolean getExec() exec,

    void setSandbox(boolean bo) sandbox := bo,
    boolean getSandbox() sandbox,

    void setSource(String src) source := src,
    String getSource() source,

    EvalResult eval(String code) 
        opts = array[];
        if bind then
            push opts (Bind ())
        fi;
        if not nullptr? args then
            mapJavaList string args
            |> array
            |> Exec 
            |> push opts
        fi;
        if not exec then
            push opts (NoExec ())
        fi;
        if sandbox then
            push opts (GlobalSandbox ())
        fi;
        if defined? source then
            push opts (Source (string source));
        fi;

        fn = case ctxt of
            None (): 
                ct = evaluateYetiCode (_getGenericOptions this);
                ctxt := Some ct;
                ct;
            Some c: c;
        esac;

        {bindings, result, str} = fn opts (string code);
        res = case result of
            CompileException e : throw (e is ~CompileException);
            Exception e: throw (e is ~Throwable);
            Result o: o;
        esac;
        new EvalResult(array bindings, res, str), 

end;




{
    compileYetiFiles, evaluateYetiCode, generateYetiDoc
}
