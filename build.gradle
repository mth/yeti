// Gradle is only for publishing to maven repositories (build uses ANT)
configurations { antjar }
repositories { mavenCentral() }
dependencies { antjar 'org.apache.ant:ant:1.10.9' }

def antBuildDir = new File(buildDir, 'ant')
ant.properties.build = antBuildDir
ant.properties.jardir = buildDir
ant.importBuild('build.xml') { it == "clean" ? "ant-clean" : it }

task findAntJar(dependsOn: configurations.antjar) {
    doFirst {
        for (jar in configurations.antjar.resolve()) {
            if (jar.name =~ '^ant-\\d') { // need main jar, not launcher
                ant.properties.antjar = jar
            }
        }
    }
}

tasks['prepare-build'].dependsOn findAntJar

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    version = '1.1'

    if (project != rootProject) {
        apply plugin: 'java'
        buildDir = new File(rootProject.buildDir, name)
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from(projectDir) {
                include '*.java'
                include '*.yeti'
                into (project.name == 'yeti-lib' ? 'yeti/lang' :
                        'yeti/lang/compiler')
            }
            if (project.name == 'yeti-lib') {
                from(rootProject.file('modules')) {
                    include '*.yeti'
                }
            }
        }
        task javadocJar(type: Jar, dependsOn: rootProject.javadoc) {
            classifier = 'javadoc'
            from new File(new File(antBuildDir, 'javadoc'), projectDir.name)
        }
    }

    def jarPath = new File(buildDir, "$name-${version}.jar")
    rootProject.ant.properties["${name}.jar"] = jarPath
    if (name == 'yeti-compiler') {
        dependencies { implementation "io.github.mth.yeti:yeti:$version" }
        jar.dependsOn rootProject.jar
        jar {
            from(zipTree(new File(rootProject.buildDir,
                                  "yeti-${project.version}.jar"))) {
                exclude 'yeti/*.class'
                exclude 'yeti/lang/*.class'
            }
            manifest.attributes("Class-Path": "yeti-lib.jar",
                                "Main-Class": "yeti.lang.compiler.yeti")
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = 'io.github.mth.yeti'
                artifactId = project.name
                version = project.version
                if (project.name == 'yeti-compiler') {
                    from components.java
                } else {
                    artifact(jarPath) { builtBy rootProject.jar }
                }
                if (project != rootProject) {
                    artifact sourcesJar
                    artifact javadocJar
                }
                pom {
                    url = 'https://mth.github.io/yeti/'
                    licenses {
                        license {
                            name = 'Simplified BSD License'
                            url = 'https://mth.github.io/yeti/LICENSE.txt'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/mth/yeti.git'
                        developerConnection = 'scm:git:ssh:git@github.com:mth/yeti.git'
                        url = 'https://github.com/mth/yeti/'
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.maven
    }
}

clean { delete buildDir }
