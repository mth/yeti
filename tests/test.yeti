program test;

received = array [];
addReceived v =
    push received v;

h = [0.5e: true, 33.2: false];
trueTests = [
'id': \(id true),
'const': const true,
'ignore': \(_ = false; true),
'at' : \(at h 0.5 and not (at h 33.2e)),
'not': \(not false and (not true) == false),
'and': \(true and not (false and true)),
'or' : \(not (false or false) and (false or true)),
'in': \(not (0 in h) and 0.5 in h and 33.2 in h),
'==': \(not (0 == -1) and (1 == 1)),
'!=': \(1 != 2 and not (0 != 0)),
'<' : \(1 < 2 and not (1 < 1) and not (1 < 0)),
'<=': \(1 <= 2 and 1 <= 1 and not (1 < 0)),
'>' : \(1 > 0 and not (0 > 0) and not (-2 > -1)),
'>=': \(22 >= 21.9 and 22 >= 22 and not (22 >= 22.1)),
'*' : \(2 + 3 == 5),
'-' : \(2 - 3 == -1),
'*' : \(7 * 5 == 35),
'/' : \(42 / 2 == 21),
'%' : \(7 % 5 == 2),
'.' : \(((* 2) . (+ 1)) 0.5 == 3),
'::': \(head (1 :: [2]) == 1 and tail (1 :: [2]) == [2]),
':.': \(head (1 :. \[2]) == 1 and tail (1 :. \[2]) == [2]),
'=~': \('kala' =~ 'a' and not ('kala' =~ 't')),
'^' : \(('a' ^ '7') == 'a7'),
'div': \(7 div 2 == 3),
'shl': \(7 shl 2 == 28),
'shr': \(35 shr 3 == 4),
'-x': \(x = 2; -x == 0 - 2),
'nullptr?': \(nullptr? [] and not (nullptr? 42)),
'synchronized': \(synchronized 7 \true),
'flip': \(flip (-) 2 3 == 1),
'number': \(number '13' == 13),
'min': \(min 897 13 == 13),
'max': \(max 897 13 == 897),
'abs': \(abs 52 == 52 and abs (-4) == 4),
'any': \(any (== 3) [1 .. 5] and not (any (== 3) [5 .. 10])),
'all': \(not (all (!= 3) [1 .. 5]) and (all (!= 3) [5 .. 10])),
'contains?': \(contains? 3 [1 .. 5] and not (contains? 3 [5 .. 10])),
'maybe': \(maybe false (not) (Some false)),
'struct': \(f a = { var x = a }; (f 33).x := 3; true),
'lambda': \(\\\\1 2 3 4 5 == 1),
'fun1': \(f a = a; f 1 == 1),
'fun2_1': \(f a b = a; f 1 2 == 1),
'fun2_2': \(f a b = b; f 1 2 == 2),
'fun3_1': \(f a b c = a; f 1 2 3 == 1),
'fun3_2': \(f a b c = b; f 1 2 3 == 2),
'fun3_2': \(f a b c = c; f 1 2 3 == 3),
'fun4_1': \(f a b c d = a; f 1 2 3 4 == 1),
'fun4_2': \(f a b c d = b; f 1 2 3 4 == 2),
'fun4_3': \(f a b c d = c; f 1 2 3 4 == 3),
'fun4_4': \(f a b c d = d; f 1 2 3 4 == 4),
'fun5_1': \(f a b c d e = a; f 1 2 3 4 5 == 1),
'fun5_2': \(f a b c d e = b; f 1 2 3 4 5 == 2),
'fun5_3': \(f a b c d e = c; f 1 2 3 4 5 == 3),
'fun5_4': \(f a b c d e = d; f 1 2 3 4 5 == 4),
'fun5_5': \(f a b c d e = e; f 1 2 3 4 5 == 5),
'funp2_1': \(f = (_ a b = a) 1; f 2 == 1),
'funp2_2': \(f = (_ a b = b) 1; f 2 == 2),
'funp3_1': \(f = (_ a b c = a) 1; f 2 3 == 1),
'funp3_2': \(f = (_ a b c = b) 1; f 2 3 == 2),
'funp3_2': \(f = (_ a b c = c) 1; f 2 3 == 3),
'funp4_1': \(f = (_ a b c d = a) 1; f 2 3 4 == 1),
'funp4_2': \(f = (_ a b c d = b) 1; f 2 3 4 == 2),
'funp4_3': \(f = (_ a b c d = c) 1; f 2 3 4 == 3),
'funp4_4': \(f = (_ a b c d = d) 1; f 2 3 4 == 4),
'funp5_1': \(f = (_ a b c d e = a) 1; f 2 3 4 5 == 1),
'funp5_2': \(f = (_ a b c d e = b) 1; f 2 3 4 5 == 2),
'funp5_3': \(f = (_ a b c d e = c) 1; f 2 3 4 5 == 3),
'funp5_4': \(f = (_ a b c d e = d) 1; f 2 3 4 5 == 4),
'funp5_5': \(f = (_ a b c d e = e) 1; f 2 3 4 5 == 5),
'named lambda': do:
    fib = (f p n c = if c <= 0 then n else f n (p + n) (c - 1) fi) 0 1;
    fib 10 == 89
done,
'class closure': do:
    wtf = [:];
    wtff x = wtf.[x] := true;
    class X(int a)
        var x = a,
        f _ = x,
        int test() f (addReceived "kala"; wtff 12)
    end;
    class Y
        void test() push received "test"
    end;
    new Y()#test();
    new X(33)#test() == 33 and list received == ["test", "kala"] and wtf.[12];
done,
'closure fields': do:
    class Foo()
      var bar = 19,

      int test(int x)
        f () = bar + x;
        f ()
    end;
    foo = new Foo();
    foo#test(23) == 42
done,
'try-catch class closure': do: 
    kill _ = ();
    class Flush
        void run()
            try 
            catch Exception ex:
                kill ()
            yrt;
    end;
    not nullptr? new Flush()
done,
'tail recursion': do:
    compile inStart tokens =
       case tokens of
        1 :: rest:
            compile false rest;
        _ :: rest:
            if inStart then
                compile true rest
            else
                true
            fi;
        _: false;
        esac;
    compile true [1, 2]
done,
'with': do:
    a = {x = 10};
    b = {x = 12};
    a with b == b
done,
'escaped symbols' : do:
    import yeti.lang.Struct;
    
    ``some @symb`` = 2; 
    stru = {``one-var test`` = 'foo-text'};
    
    ``some @symb`` == 2 and
    'foo-text' == stru.``one-var test``
    and ((stru as ~Object) unsafely_as ~Struct)#get('one-var test')#equals("foo-text");
done,
];

var bad = 0;

forHash trueTests do name f:
    if not (f ()) then
        println "\(name) failed.";
        bad := bad + 1
    fi
done;

total = length trueTests;
println "Testing done, \(total - bad)/\(total) OK.";
